#include "common/common_utils/StrictMode.hpp"
STRICT_MODE_OFF
#ifndef RPCLIB_MSGPACK
#define RPCLIB_MSGPACK clmdep_msgpack
#endif // !RPCLIB_MSGPACK
#include "rpc/rpc_error.h"
STRICT_MODE_ON

#include "vehicles/multirotor/api/MultirotorRpcLibClient.hpp"
#include "common/common_utils/FileSystem.hpp"
#include <iostream>
#include <chrono>
#include <opencv2/opencv.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include<vector>
#include <opencv2\imgproc\types_c.h>
#include "../../AirLib/include/common/PidController.hpp"
#include <opencv2/opencv.hpp>
#include <iostream>
#include <fstream>
#include <math.h>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui_c.h>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/opencv.hpp>
#include <opencv2/features2d/features2d.hpp>

#include "cv.h"
#include "highgui.h"
#include "cxcore.h"
using namespace std;
using namespace cv;
#include "opencv2/core/core.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/highgui/highgui.hpp"

#include <iostream>
#include <math.h>
#include <string.h>


int thresh = 50, N = 5;
const char* wndname = "Square Detection Demo";

// helper function:
// finds a cosine of angle between vectors
// from pt0->pt1 and from pt0->pt2
static double angle(Point pt1, Point pt2, Point pt0)
{
    double dx1 = pt1.x - pt0.x;
    double dy1 = pt1.y - pt0.y;
    double dx2 = pt2.x - pt0.x;
    double dy2 = pt2.y - pt0.y;
    return (dx1 * dx2 + dy1 * dy2) / sqrt((dx1 * dx1 + dy1 * dy1) * (dx2 * dx2 + dy2 * dy2) + 1e-10);
}

// returns sequence of squares detected on the image.
// the sequence is stored in the specified memory storage
static void findSquares(const Mat& image, std::vector<std::vector<Point> >& squares)
{
    squares.clear();

    //s    Mat pyr, timg, gray0(image.size(), CV_8U), gray;

        // down-scale and upscale the image to filter out the noise
        //pyrDown(image, pyr, Size(image.cols/2, image.rows/2));
        //pyrUp(pyr, timg, image.size());


        // blur will enhance edge detection
    Mat timg(image);
    Mat gray0(timg.size(), CV_8U), gray;

    std::vector<std::vector<Point> > contours;

    // find squares in every color plane of the image
    for (int c = 0; c < 3; c++)
    {
        int ch[] = { c, 0 };
        mixChannels(&timg, 1, &gray0, 1, ch, 1);

        // try several threshold levels
        for (int l = 0; l < N; l++)
        {
            // hack: use Canny instead of zero threshold level.
            // Canny helps to catch squares with gradient shading
            if (l == 0)
            {
                // apply Canny. Take the upper threshold from slider
                // and set the lower to 0 (which forces edges merging)
                Canny(gray0, gray, 5, thresh, 5);
                // dilate canny output to remove potential
                // holes between edge segments
                dilate(gray, gray, Mat(), Point(-1, -1));
            }
            else
            {
                // apply threshold if l!=0:
                //     tgray(x,y) = gray(x,y) < (l+1)*255/N ? 255 : 0
                gray = gray0 >= (l + 1) * 255 / N;
            }

            // find contours and store them all as a list
            findContours(gray, contours, RETR_LIST, CHAIN_APPROX_SIMPLE);

            std::vector<Point> approx;

            // test each contour
            for (size_t i = 0; i < contours.size(); i++)
            {
                // approximate contour with accuracy proportional
                // to the contour perimeter
                approxPolyDP(Mat(contours[i]), approx, arcLength(Mat(contours[i]), true) * 0.02, true);

                // square contours should have 4 vertices after approximation
                // relatively large area (to filter out noisy contours)
                // and be convex.
                // Note: absolute value of an area is used because
                // area may be positive or negative - in accordance with the
                // contour orientation
                if (approx.size() == 4 &&
                    fabs(contourArea(Mat(approx))) > 1000 &&
                    isContourConvex(Mat(approx)))
                {
                    double maxCosine = 0;

                    for (int j = 2; j < 5; j++)
                    {
                        // find the maximum cosine of the angle between joint edges
                        double cosine = fabs(angle(approx[j % 4], approx[j - 2], approx[j - 1]));
                        maxCosine = MAX(maxCosine, cosine);
                    }

                    // if cosines of all angles are small
                    // (all angles are ~90 degree) then write quandrange
                    // vertices to resultant sequence
                    if (maxCosine < 0.3)
                        squares.push_back(approx);
                }
            }
        }
    }
}


// the function draws all the squares in the image
static void drawSquares(Mat& image, const std::vector<std::vector<Point> >& squares)
{

    //for (size_t i = 0; i < squares.size(); i++)
    {
        const Point* p = &squares[1][0];

        int n = (int)squares[1].size();
        //dont detect the border
        if (p->x > 3 && p->y > 3)
            polylines(image, &p, &n, 1, true, Scalar(0, 255, 0), 3, LINE_AA);
    }


}


void getPXSum(Mat& src, int& a)//获取所有像素点和
{
	threshold(src, src, 100, 255, CV_THRESH_BINARY);
	a = 0;
	for (int i = 0; i < src.rows; i++)
	{
		for (int j = 0; j < src.cols; j++)
		{
			a += src.at <uchar>(i, j);
		}
	}
}



int  getSubtract(Mat& src, int TemplateNum) //数字识别
{
	Mat img_result;
	int min = 100000000;
	int serieNum = 0;
	char name[50];
	for (int i = 0; i < 9; i++) {
		int diff1 = 0, diff2 = 0;
		
		sprintf_s(name, "%d.jpg", i);
		Mat Template = imread(name, CV_LOAD_IMAGE_GRAYSCALE);//读取模板
		threshold(Template, Template, 100, 255, CV_THRESH_BINARY);
		threshold(src, src, 100, 255, CV_THRESH_BINARY);
		resize(src, src, Size(620, 480));
		resize(Template, Template, Size(620, 480));//调整尺寸
		//imshow(name, Template);
		//getPXSum(Template, diff1);
		//getPXSum(src, diff2);
		/*让需要匹配的图分别和10个模板对应像素点值相减，然后求返回图片的整个图片的像素点值得平方和，和哪个模板匹配时候返回图片的平方和最小则就可以得到结果*/
		absdiff(Template, src, img_result);//AbsDiff，OpenCV中计算两个数组差的绝对值的函数。
		int diff = 0;
		getPXSum(img_result, diff);//获取所有像素点和
		if (diff < min)//像素点对比
		{
			min = diff;
			serieNum = i;
		}

	}

	printf("最小距离是%d ", min);
	printf("匹配到第%d个模板匹配的数字是%d\n", serieNum, serieNum);
	return serieNum;
}






int main()
{
     static const char* names[] = { "100.jpg", 0 };
    namedWindow(wndname, 1);
    std::vector<std::vector<Point>> squares;

    for (int i = 0; names[i] != 0; i++)
    {
        Mat image = imread(names[i], 1);
        //if (image.empty())
        //{
        //    cout << "Couldn't load " << names[i] << endl;
        //    continue;
        //}

        findSquares(image, squares);
        drawSquares(image, squares);
        cout << squares[1][0] << endl;
        cout << squares[1][1] << endl;
        cout << squares[1][2] << endl;
        cout << squares[1][3] << endl;
  /*      circle(image, squares[2][0], 12, Scalar(0, 0, 255), -1);
        circle(image, squares[1][1], 12, Scalar(255, 0, 255), -1);
        circle(image, squares[1][2], 12, Scalar(0, 255, 255), -1);
        circle(image, squares[1][3], 12, Scalar(255, 255, 0), -1);*/
        imshow(wndname, image);
        int chang = 0, kuan = 0;
        int aa = abs(squares[1][1].x - squares[1][0].x);
        int bb = abs(squares[1][2].x - squares[1][0].x);
        int cc = abs(squares[1][1].y - squares[1][0].y);
        int dd = abs(squares[1][2].y - squares[1][0].y);
        if (aa >= bb)
        {
            chang = aa;
        }
        else
        {
            chang = bb;
        }
        if (cc >= dd)
        {
            kuan = cc;
        }
        else
        {
            kuan = dd;
        }
        cout << chang<< endl;
        cout << kuan << endl;
        int zsx = 0, zsy = 0;
        for (i = 0; i < 4; i++)
        {
            int he= squares[1][0].x + squares[1][0].y;
            if (squares[1][i].x + squares[1][i].y <= he)
            {
                he = squares[1][i].x + squares[1][i].y;
                zsx = squares[1][i].x;
                zsy = squares[1][i].y;
              
            }
        }
        cout << zsx << endl;
        cout << zsy << endl;
        printf("zsx=%d\n", zsx);
        printf("zsy=%d\n", zsy);

        Rect rect1(zsx, zsy, chang, kuan);
        Mat roi1;
        image(rect1).copyTo(roi1); // copy the region rect1 from the image to roi1
        imshow("k", roi1);
        //imwrite( "out", image );
        waitKey(800);
        //if ((char)c == 27)
          // break;
    }

	//Mat src = imread("roi1", IMREAD_GRAYSCALE);//读取图片
	//threshold(src, src, 100, 255, 1);//二值化
	//imshow("origin", src);//显示二值化后图片

	//int diff ;
	//getPXSum(src, diff);
	//printf("%d ",diff);
		//getSubtract(src , 9);//进行数字识别
		//res = cutLeft(srcTmp, leftImg, rightImg)
	return 0;
}
