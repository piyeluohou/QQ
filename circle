// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

#include "common/common_utils/StrictMode.hpp"
STRICT_MODE_OFF
#ifndef RPCLIB_MSGPACK
#define RPCLIB_MSGPACK clmdep_msgpack
#endif // !RPCLIB_MSGPACK
#include "rpc/rpc_error.h"
STRICT_MODE_ON

#include "vehicles/multirotor/api/MultirotorRpcLibClient.hpp"
#include "common/common_utils/FileSystem.hpp"
#include <iostream>
#include <chrono>
#include <opencv2/opencv.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include<vector>
#include <opencv2\imgproc\types_c.h>
#include "../../AirLib/include/common/PidController.hpp"
#include <opencv2/opencv.hpp>
#include <iostream>
#include <fstream>
#include <math.h>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui_c.h>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/opencv.hpp>
#include <opencv2/features2d/features2d.hpp>

int main()
{
    cv::Mat img;

    using namespace msr::airlib;
    char c = 0;

    msr::airlib::MultirotorRpcLibClient client;
    typedef ImageCaptureBase::ImageRequest ImageRequest;
    typedef ImageCaptureBase::ImageResponse ImageResponse;
    typedef ImageCaptureBase::ImageType ImageType;
    typedef common_utils::FileSystem FileSystem;
    Vector3r ned_origin, ned_curr, ned_target, home_ned, control_origin;
#define CLIP3(_n1, _n,  _n2) {if (_n<_n1) _n=_n1;  if (_n>_n2) _n=_n2;}
    try {
        client.confirmConnection();

        client.enableApiControl(true);
        client.armDisarm(true);
        int circle_count = 0;
        int ab_flag = 0;
        int count_go = 0;
        ned_target(0) = 240;
        ned_target(1) = 320;
        ned_target(2) = 2.2;
        //pid
        PidController pidX, pidY, pidZ, pidP_X, pidP_Y, pidP_Z, pid_yaw;
        pidP_X.setPoint(ned_target(0), 0.0015, 0, 0.0005);
        pidP_Y.setPoint(ned_target(1), 0.0015, 0, 0.0005);//roll
        pidZ.setPoint(ned_target(2), 0.3, 0, 0.4);
        pidP_Z.setPoint(ned_target(0), 0.005, 0, 0.0003);//delta_throttle

        std::cout << "Press Enter to takeoff" << std::endl; std::cin.get();
        float takeoffTimeout = 6;
        client.takeoffAsync(takeoffTimeout)->waitOnLastTask();
        client.moveByRollPitchYawrateThrottleAsync(0, 0, 0, 0.6f, 1.0f);
        std::this_thread::sleep_for(std::chrono::duration<double>(1.0f));


        int s = 0;
        int x = 0, y = 0;
        for (int i = 1; i < 50; i++)
        {
            std::vector<ImageRequest> request = { ImageRequest("0", ImageType::Scene) };
            const vector<ImageResponse>& response = client.simGetImages(request);

            img = cv::imdecode(response.at(0).image_data_uint8, cv::IMREAD_UNCHANGED);

            cv::namedWindow("imageScene");
            cv::imshow("imageScene", img);
            cv::Mat midImage;
            cv::cvtColor(img, midImage, CV_BGR2GRAY);//转化边缘检测后的图为灰度图
            GaussianBlur(midImage, midImage, cv::Size(9, 9), 2, 2);

            //【3】进行霍夫圆变换
            vector<cv::Vec3f> circles;
            HoughCircles(midImage, circles, CV_HOUGH_GRADIENT, 1.5, 10, 200, 100, 0, 0);

            //【4】依次在图中绘制出圆
            if ((circles.size() < 1) && (s <= 2))
            {
                s = s + 1;
            }
            else if (s > 2)
            {
                //调整
                s = 0;
            }
            else
            {
                for (size_t i = 0; i < circles.size(); i++)
                {
                    s = 0;
                    //参数定义
                    cv::Point center(cvRound(circles[i][0]), cvRound(circles[i][1]));
                    int radius = cvRound(circles[i][2]);
                    //绘制圆心
                    circle(img, center, 3, cv::Scalar(0, 255, 0), -1, 8, 0);
                    //绘制圆轮廓
                    circle(img, center, radius, cv::Scalar(155, 50, 255), 3, 8, 0);
                    //打印圆心坐标
                    x = x + cvRound(circles[i][0]);
                    y = y + cvRound(circles[i][0]);
                    printf("x = %d,y = %d\n", x, y);

                    //【5】显示效果图  
                    cv::namedWindow("imageScene");
                    cv::imshow("imageScene", img);
                    cv::waitKey(500);
                    cv::destroyAllWindows();

                    if (abs(y - 270) < 100 && abs(x - 320) < 10)
                    {
                        count_go++;
                        if (count_go > 1)
                        {
                            client.hoverAsync();
                            std::this_thread::sleep_for(std::chrono::duration<double>(1.0f));
                            std::cout << "钻" << std::endl;
                            if (abs(y) > 360)
                            {
                                client.moveByRollPitchYawrateThrottleAsync(0, -0.2, 0.0f, 0.58, 2.5f);
                                std::this_thread::sleep_for(std::chrono::duration<double>(2.5f));
                                client.moveByRollPitchYawrateThrottleAsync(0, 0, 0.0f, 0.6, 1.0f);
                                std::this_thread::sleep_for(std::chrono::duration<double>(1.0f));
                                std::cout << "降高钻" << std::endl;
                            }
                            else
                            {
                                client.moveByRollPitchYawrateThrottleAsync(0, -0.2, 0.0f, 0.6125, 1.9f);
                                std::this_thread::sleep_for(std::chrono::duration<double>(1.9f));
                                client.moveByRollPitchYawrateThrottleAsync(0, 0, 0.0f, 0.6, 2.0f);
                                std::this_thread::sleep_for(std::chrono::duration<double>(2.0f));
                                std::cout << "升高钻" << std::endl;
                            }
                            client.hoverAsync();
                            std::this_thread::sleep_for(std::chrono::duration<double>(1.0f));
                            count_go = 0;
                            circle_count++;
                        }
                        else
                        {
                            client.moveByRollPitchYawrateThrottleAsync(0, -0.1, 0.0f, 0.580, 0.1f);
                            std::this_thread::sleep_for(std::chrono::duration<double>(0.1f));
                        }
                    }
                    else
                    {
                        // 调整使无人机正对圆心位置
                        std::cout << "调整" << std::endl;
                        float delta_throttle = (pidP_Z.control(y));
                        float roll = pidP_Y.control(x);
                        float pitch = -0.3;// pidP_X.control(a + b);//ab是椭圆的长短轴

                        CLIP3(-0.5, roll, 0.5);
                        CLIP3(-0.7, pitch, 0.7);
                        CLIP3(0.58, delta_throttle, 0.85);
                        //client.moveByRollPitchYawrateThrottleAsync(-roll, -1.4 * pitch, 0.0f, 1.1 * delta_throttle, 0.5f);
                        client.moveByRollPitchYawrateThrottleAsync(-roll, 0, 0.0f, delta_throttle, 0.5f);
                        std::this_thread::sleep_for(std::chrono::duration<double>(0.5f));
                        //client.moveByRollPitchYawrateThrottleAsync(0, 0, 0.0f, 0.6, 1.0f);
                       // std::this_thread::sleep_for(std::chrono::duration<double>(1.0f));
                        std::cout << "roll: " << roll << "移动完毕！" << "delta_throttle: " << delta_throttle << std::endl;
                        if (y < 100)
                        {
                            client.moveByRollPitchYawrateThrottleAsync(0.0f, 0.0f, 0.0f, 0.6125, 1.0f);
                            std::this_thread::sleep_for(std::chrono::duration<double>(1.0f));
                            std::cout << "高度调整完毕！" << std::endl;
                        }
                        if (y > 350)
                        {
                            client.moveByRollPitchYawrateThrottleAsync(0.0f, 0.0f, 0.0f, 0.55, 1.0f);
                            std::this_thread::sleep_for(std::chrono::duration<double>(1.0f));
                            std::cout << "高度调整完毕！" << std::endl;
                        }
                    }
                    client.hoverAsync();
                    x = 0;
                    y = 0;
                    break;
                }
            }
            printf("s=&d\n",s);
        }


        client.enableApiControl(true);
        auto position = client.getMultirotorState().getPosition();
        float z = position.z(); // current position (NED coordinate system).  
        const float speed = 4.0f;
        const float size = 11.0f;
        const float duration = size / speed;
        DrivetrainType driveTrain = DrivetrainType::ForwardOnly;
        YawMode yaw_mode(true, 0);

        client.moveByRollPitchYawrateThrottleAsync(0, 0, 0, 0.6f, 1.0f);
        std::this_thread::sleep_for(std::chrono::duration<double>(1.0f));


        std::cout << "Press Enter to land" << std::endl; std::cin.get();
        client.landAsync()->waitOnLastTask();

        std::cout << "Press Enter to disarm" << std::endl; std::cin.get();
        client.armDisarm(false);

    }

    catch (rpc::rpc_error& e) {
        std::string msg = e.get_error().as<std::string>();
        std::cout << "Exception raised by the API, something went wrong." << std::endl << msg << std::endl;
    }

    return 0;
}
